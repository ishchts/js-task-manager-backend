- const getInputName = (property) => `data[${property}]`
- const getInputId = (property) => `data_${property}`

mixin formFor(entity = null)
  form&attributes(attributes)
    block

mixin input(entity, propertyName, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= propertyName
    input(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
      value=_.get(entity, propertyName, '')
    )&attributes(attributes)
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin textarea(entity, propertyName, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= propertyName
    textarea(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
    )&attributes(attributes)= _.get(entity, propertyName, '')
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin select(entity, options, propertyName, errors = {},)
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= propertyName
    select(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
    )&attributes(attributes)
      option()
      each option in options
        - isSelected = String(option.id) === String(_.get(entity, propertyName, ''))
        if option.name
          option(value=`${option.id}` selected=isSelected)= option.name
        if option.firstName && option.lastName
          option(value=`${option.id}` selected=isSelected)= `${option.firstName} ${option.lastName}`
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin filterSelect(entity, options, propertyName)
  - classLine = 'form-control'
  - inputId = propertyName
  .mb-3
    label(
      for= inputId
    )= propertyName
    select(
      id= inputId
      name=propertyName
      class=classLine
    )&attributes(attributes)
      option()
      each option in options
        - isSelected = String(option.id) === String(_.get(entity, propertyName, ''))
        if option.name
          option(value=`${option.id}` selected=isSelected)= option.name
        if option.firstName && option.lastName
          option(value=`${option.id}` selected=isSelected)= `${option.firstName} ${option.lastName}`

mixin submit(form = null)
  input(class='btn btn-primary' type='submit')&attributes(attributes)

mixin buttonTo(action, method)
  form(action=action, method="post")
    input(name="_method" type="hidden" value=method)
    input(type='submit')&attributes(attributes)

mixin filterCheckBox(entity, entityName, propertyName)
  - inputId = getInputId(propertyName)
  - isChecked = Boolean(_.get(entity, propertyName, ''))
  .mb-3.form-check
    input.form-check-input(
      id= inputId
      type='checkbox'
      name= propertyName
      checked= isChecked
    )
    label.form-check-label(
      for= inputId
    )= t(`views.${entityName}.filter.${propertyName}`)